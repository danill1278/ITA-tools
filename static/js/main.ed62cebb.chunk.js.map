{"version":3,"sources":["store/actions.tsx","store/actions-constants.jsx","components/App/MenuContainer/NavigationMenu/MenuItems/MenuItems.tsx","components/App/MenuContainer/NavigationMenu/NavigationMenu.tsx","components/App/MenuContainer/Logo/Logo.tsx","components/App/MenuContainer/Chat/Chat.tsx","components/App/MenuContainer/MenuContainer.tsx","components/App/ContentWrapper/HomePage/Tiles/TileItem/TileItem.tsx","components/App/ContentWrapper/HomePage/Tiles/Tiles.tsx","components/App/ContentWrapper/HomePage/HomePage.tsx","components/App/ContentWrapper/ProfilePage/ProfilePage.tsx","components/App/ContentWrapper/ContentWrapper.tsx","components/App/App.tsx","serviceWorker.ts","store/reduces.tsx","index.tsx"],"names":["changeProjectTitle","title","type","payload","MenuItems","NavigationMenu","Logo","Chat","MenuContainer","TileItem","Tiles","HomePage","ProfilePage","ContentWrapper","path","exact","component","connect","state","projectTitle","dispatch","bindActionCreators","className","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ifAGaA,EAAqB,SAACC,GAC/B,MAAO,CACHC,KCL4B,uBDM5BC,QAASF,IEGFG,G,kBANG,WAChB,OACE,oDCQWC,EATQ,WACrB,OACE,6BACE,mDACA,kBAAC,EAAD,QCCSC,G,MANF,WACX,OACE,2CCIWC,G,MANF,WACX,OACE,2CCYWC,EAXO,WACpB,OACE,6BACE,8CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHSC,G,wBANE,WACf,OACE,uDCQWC,EATD,WACZ,OACE,6BACE,8CACA,kBAAC,EAAD,QCKSC,EATE,WACf,OACE,6BACE,6CACA,kBAAC,EAAD,Q,OCGSC,G,MARK,WAClB,OACE,6BACE,mDCYSC,EAZQ,WACrB,OACE,6BACE,+CACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAYL,IAClC,kBAAC,IAAD,CAAOG,KAAK,WAAWE,UAAYJ,OCkB5BK,eAVS,SAACC,GACvB,MAAO,CAACC,aAAcD,EAAMC,iBAGH,SAACC,GAC1B,MAAO,CACHpB,mBAAoBqB,YAAmBrB,EAAoBoB,MAIlDH,EArBH,WACV,OACE,yBAAKK,UAAU,OACb,gHACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YChBAC,EAAe,CACjBT,aAAc,a,QCOZU,EAAQC,aDAa,WAA6C,IAA5CZ,EAA2C,uDAA9BU,EAAcG,EAAgB,uCACnE,OAAQA,EAAO7B,MACX,IbZ4B,uBaaxB,OAAO,eAAIgB,EAAX,CAAkBC,aAAcY,EAAO5B,UAE/C,OAAOe,KCHXc,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAQA,GAChB,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJK,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ed62cebb.chunk.js","sourcesContent":["\nimport { CHANGE_PROJECT_TITLE } from './actions-constants';\n\nexport const changeProjectTitle = (title: string) => {\n    return {\n        type: CHANGE_PROJECT_TITLE,\n        payload: title\n    }\n}","export const CHANGE_PROJECT_TITLE = 'CHANGE_PROJECT_TITLE';","import React from 'react';\nimport './MenuItems.css';\n\nconst MenuItems = () => {\n  return (\n    <div>--------MenuItems</div>\n  )\n} \n\nexport default MenuItems;","import React from 'react';\nimport './NavigationMenu.css';\nimport MenuItems from './MenuItems/MenuItems';\n\nconst NavigationMenu = () => {\n  return (\n    <div>\n      <div>----NavigationMenu</div>\n      <MenuItems />\n    </div>\n  )\n} \n\nexport default NavigationMenu;","import React from 'react';\nimport './Logo.css';\n\nconst Logo = () => {\n  return (\n    <div>----Logo</div>\n  )\n} \n\nexport default Logo;","import React from 'react';\nimport './Chat.css';\n\nconst Chat = () => {\n  return (\n    <div>----Chat</div>\n  )\n} \n\nexport default Chat;","import React from 'react';\nimport './MenuContainer.css';\nimport NavigationMenu from './NavigationMenu/NavigationMenu';\nimport Logo from './Logo/Logo';\nimport Chat from './Chat/Chat';\n\nconst MenuContainer = () => {\n  return (\n    <div>\n      <div>MenuContainer</div>\n      <Logo />\n      <NavigationMenu />\n      <Chat />\n    </div>\n  )\n} \n\nexport default MenuContainer;","import React from 'react';\nimport './TileItem.css';\n\nconst TileItem = () => {\n  return (\n    <div>------------TileItem</div>\n  )\n}\n\nexport default TileItem;","import React from 'react';\nimport './Tiles.css';\nimport TileItem from './TileItem/TileItem';\n\nconst Tiles = () => {\n  return (\n    <div>\n      <div>--------Tiles</div>\n      <TileItem />\n    </div>\n  )\n}\n\nexport default Tiles;","import React from 'react';\nimport './HomePage.css';\nimport Tiles from './Tiles/Tiles';\n\nconst HomePage = () => {\n  return (\n    <div>\n      <div>----HomePage</div>\n      <Tiles />\n    </div>\n  )\n}\n\nexport default HomePage;","import React from 'react';\nimport './ProfilePage.css';\n\nconst ProfilePage = () => {\n  return (\n    <div>\n      <div>----ProfilePage</div>\n    </div>\n  )\n}\n\nexport default ProfilePage;","import React from 'react';\nimport './ContentWrapper.css';\nimport HomePage from './HomePage/HomePage';\nimport { Switch, Route } from 'react-router';\nimport ProfilePage from './ProfilePage/ProfilePage';\n\nconst ContentWrapper = () => {\n  return (\n    <div>\n      <div>ContentWrapper</div>\n      <Switch>\n        <Route path=\"/\" exact component={ HomePage } />\n        <Route path=\"/profile\" component={ ProfilePage } />\n      </Switch>\n    </div>\n  )\n}\n\nexport default ContentWrapper;","import React from 'react';\nimport './App.css';\nimport '../../assets/fonts/FontAwesome.css';\nimport { bindActionCreators } from 'redux'; \nimport { connect } from 'react-redux'; \nimport { changeProjectTitle } from '../../store/actions';\nimport MenuContainer from './MenuContainer/MenuContainer';\nimport ContentWrapper from './ContentWrapper/ContentWrapper';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div>Травис Джексон</div>\n      <MenuContainer />\n      <ContentWrapper />\n    </div>\n  );\n};\n\n\nconst mapStateToProps = (state: any) => {\n  return {projectTitle: state.projectTitle};\n}\n\nconst mapActionsCreators = (dispatch: any) => {\n  return {\n      changeProjectTitle: bindActionCreators(changeProjectTitle, dispatch)\n  }\n}\n\nexport default connect(mapStateToProps, mapActionsCreators)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_PROJECT_TITLE} from './actions-constants';\n\nconst initialState = {\n    projectTitle: 'ITA-tools'\n}\n\nexport interface initialStateInterface {\n    projectTitle: string\n}\n  \nexport const rootReducer = (state: any = initialState, action: any) => {\n    switch (action.type) {\n        case CHANGE_PROJECT_TITLE: \n            return {...state, projectTitle: action.payload}\n    }\n    return state;\n} \n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport  App  from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'; \nimport { Provider } from 'react-redux'; \nimport { rootReducer } from './store/reduces';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </Provider>, \n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}